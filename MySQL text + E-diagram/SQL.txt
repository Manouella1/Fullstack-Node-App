CREATE DATABASE game_store;

USE game_store;

CREATE TABLE publishers(
    publisherId INT NOT NULL AUTO_INCREMENT,
    pubName VARCHAR(50),
    PRIMARY KEY (publisherId)
);

INSERT INTO publishers (pubName) VALUES ('Playstation');
INSERT INTO publishers (pubName) VALUES ('xbox');
INSERT INTO publishers (pubName) VALUES ('Nintendo');
INSERT INTO publishers (pubName) VALUES ('Steam');
INSERT INTO publishers (pubName) VALUES ('Epic Game Store');
INSERT INTO publishers (pubName) VALUES ('GOG');
INSERT INTO publishers (pubName) VALUES ('IOS/Android');

SELECT * FROM publishers;

CREATE TABLE products(
    productId INT NOT NULL AUTO_INCREMENT,
    pubPro INT,
    productSerial VARCHAR(50) UNIQUE,
    productName VARCHAR(50),
    productImage VARCHAR(100),
    productStock INT,
    productPrice INT NOT NULL,
    productCategory VARCHAR(50),
    PRIMARY KEY (productId),
    FOREIGN KEY (pubPro) REFERENCES publishers(publisherId)
);

-- Om man vill ta bort specifiik produkt
-- DELETE FROM products WHERE productId = 2;

INSERT INTO products(pubPro, productSerial, productName, productImage, productStock, productPrice, productCategory)
VALUES (1, 'US12345-1', 'Crash Twinsanity', 'url', 3000, 299, 'Platformer'),
       (1, 'US12345-2', 'Contra: Shattered Soldier', 'url', 5, 399, 'Arcade Shooter'),
       (1, 'US12345-3', 'Transformers', 'url', 100, 399, 'Shooter'),
       (1, 'US12345-4', 'Final Fantasy X', 'url', 300, 199, 'RPG'),
       (1, 'JPN12345-1', 'Berserk Millennium Falcon Arc: Seimasenki no Sho', 'url', 5, 699, 'Hack & Slash'),
       (1, 'US12345-5', 'I-Ninja', 'url', 400, 299, 'Puzzle, Platformer' ),
       (2, 'US12345-6', 'Phantom Dust', 'url', 10, 499,'Action, Cards' ),
       (2, 'US12345-7', 'Panzer Dragoon Orta', 'url', 30, 399, 'Arcade, Rail shooter'),
       (2, 'US12345-8', 'Otogi: Myth of Demons', 'url', 150, 299, 'Hack & Slash' ),
       (2, 'US12345-9', 'Halo 2', 'url', 500, 299, 'FPS, Shooter'),
       (2, 'US23456-1', 'Jade Empire', 'url', 200, 399, 'Action RPG'),
       (2, 'JPN12345-2', 'Jet Set Radio Future', 'url', 100, 399, 'Platformer, Extreme sports'),
       (3, 'US23456-2', 'Super Smash Bros: Melee', 'url', 500, 599, 'Fighting' ),
       (3, 'US23456-3', 'Metroid Prime', 'url', 300, 499, 'Metroidvania, Shooter'),
       (3, 'JPN12345-3', 'Tales of Symphonia', 'url', 200, 299, 'Action RPG'),
       (3, 'US23456-4', 'Eternal Darkness: Sanity''s Requiem', 'url', 400, 399, 'Puzzle, Survival, Horror'),
       (3, 'US23456-5', 'SoulCalibur II', 'url', 300, 399, 'Fighting'),
       (3, 'US23456-6', 'Ikaruga', 'url', 200, 299, 'Shoot em up'),
       (4, 'US23456-7', 'WarCraft III: Reign of Chaos', 'url', 1000000, 199, 'Real-time strategy'),
       (4, 'US23456-8', 'Age of Mythology', 'url', 1000000, 199, 'Real-time strategy'),
       (4, 'US23456-9', 'The Orange Box', 'url', 1000000, 199, 'FPS, Shooter, Platformer'),
       (4, 'US34567-1', 'BioShock', 'url', 1000000, 99, 'FPS'),
       (4, 'US34567-2', 'Day of the Tentacle', 'ulr', 1000000, 99, 'Point & Click, Adventure, Puzzle'),
       (4, 'US34567-3', 'System Shock 2', 'url', 1000000, 99, 'FPS, Stealth, RPG');

CREATE VIEW productView AS
SELECT publishers.pubName, products.productName, products.productStock FROM publishers
INNER JOIN products ON publishers.publisherId = products.pubPro;

SELECT * FROM productView;

SELECT * FROM products;


CREATE TABLE customers(
    customerId INT NOT NULL AUTO_INCREMENT,
    customerName VARCHAR(50),
    customerMail VARCHAR(50),
    customerAdress VARCHAR(50),

    PRIMARY KEY (customerId)
);

INSERT INTO customers (customerName, customerMail, customerAdress) VALUES ('Pedram', 'pedram@iths.se', 'biskopsgården');
INSERT INTO customers (customerName, customerMail, customerAdress) VALUES ('Mano', 'mano@iths.se', 'torslanda'), ('Emnet', 'emnet@iths.se', 'gbg');


-- tillåter NULL i foreign key kolumnen om en kundvagn inte har en aktiv kupong.

CREATE TABLE coupons (
    couponId INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) UNIQUE,
    discount INT,
    expirationDate DATE,
    isActive BOOLEAN
);

INSERT INTO coupons (code, discount, expirationDate, isActive) VALUES ('sommar20', 20, '2024-06-01', true);

SELECT * FROM coupons;

CREATE TABLE cart(
    cartId INT NOT NULL AUTO_INCREMENT,
    deliveryOption VARCHAR(50),
    shippingAdress VARCHAR(50),
    couponId INT NULL,
FOREIGN KEY (couponId) REFERENCES coupons(couponId),
    PRIMARY KEY (cartId)
);

INSERT INTO cart (deliveryOption, shippingAdress) VALUES ('DHL', 'DHL service point');
INSERT INTO cart (deliveryOption, shippingAdress) VALUES ('DHL', 'DHL service point');
INSERT INTO cart (deliveryOption, shippingAdress, couponId) VALUES ('DHL', 'DHL service point', 1);


SELECT * FROM cart;

CREATE TABLE orders(
    orderId INT NOT NULL AUTO_INCREMENT,
    productOrder INT,
    orderNumber VARCHAR(50),
    orderQuantity INT,
    customerOrder INT,
    cartOrder INT,
    PRIMARY KEY (orderId),
    FOREIGN KEY (productOrder) REFERENCES products(productId),
    FOREIGN KEY (customerOrder) REFERENCES customers(customerId),
    FOREIGN KEY (cartOrder) REFERENCES cart(cartId)
);


-- Dessa rader skapar första ordern
INSERT INTO orders (productOrder, orderNumber,  customerOrder, cartOrder,  orderQuantity) VALUES (1, 'order1', 1, 1, 2);
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (2, 'order1', 1, 1, 2);

-- Här skapar vi andra ordern
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (2, 'order2', 2, 2, 3);

-- Här skapas tredje ordern
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (3, 'order4', 2, 2, 2);
-- one more
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (3, 'order4', 2, 2, 1);



SELECT * FROM orders;
SELECT * FROM products;


CREATE VIEW OrderView AS
SELECT products.productName, customers.customerName, cart.shippingAdress, orders.orderNumber, products.productSerial, orders.orderQuantity FROM products
INNER JOIN orders ON products.productId = orders.productOrder
INNER JOIN customers ON orders.customerOrder = customers.customerId
INNER JOIN cart ON orders.cartOrder = cart.cartId;

SELECT * FROM OrderView;

SELECT COUNT(orderId) AS countCartItem
FROM orders
INNER JOIN cart ON orders.cartOrder = cart.cartId
WHERE orders.orderNumber = 'order1';

-- Trigger som håller koll på lagersaldo (productStock)
DELIMITER $$
CREATE TRIGGER stockUpdate
    AFTER INSERT ON orders
     FOR EACH ROW
        BEGIN
            IF EXISTS (SELECT * FROM products WHERE productStock > NEW.orderQuantity) THEN

-- uppdatera produktlager - så många som är köpta i en order.
-- productId = productOrder eftersom productId är FK i order tabellen
       UPDATE products SET productStock = productStock - NEW.orderQuantity WHERE productId = NEW.productOrder;
        ELSE
            -- Kasta ett fel om det inte finns tillräckligt lager
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Insufficient stock available';
END IF;

END $$

-- Trigger som inte hindrar order att genomföras om lagersaldo är 0
DELIMITER //
CREATE TRIGGER emptyStock
    BEFORE INSERT ON orders
    FOR EACH ROW
    BEGIN
        IF EXISTS (SELECT * FROM products WHERE productStock < NEW.orderQuantity) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Not in stock';
        END IF ;
    END //


-- För eventuell korrigering
DROP TRIGGER emptyStock;
DROP TRIGGER stockUpdate;
DROP DATABASE game_store;

CREATE DATABASE game_store;

USE game_store;

CREATE TABLE publishers(
    publisherId INT NOT NULL AUTO_INCREMENT,
    pubName VARCHAR(50),
    PRIMARY KEY (publisherId)
);

INSERT INTO publishers (pubName) VALUES ('Playstation');
INSERT INTO publishers (pubName) VALUES ('xbox');
INSERT INTO publishers (pubName) VALUES ('Nintendo');
INSERT INTO publishers (pubName) VALUES ('Steam');
INSERT INTO publishers (pubName) VALUES ('Epic Game Store');
INSERT INTO publishers (pubName) VALUES ('GOG');
INSERT INTO publishers (pubName) VALUES ('IOS/Android');

SELECT * FROM publishers;

CREATE TABLE products(
    productId INT NOT NULL AUTO_INCREMENT,
    pubPro INT,
    productSerial VARCHAR(50) UNIQUE,
    productName VARCHAR(50),
    productImage VARCHAR(100),
    productStock INT,
    productPrice INT NOT NULL,
    productCategory VARCHAR(50),
    PRIMARY KEY (productId),
    FOREIGN KEY (pubPro) REFERENCES publishers(publisherId)
);

-- drop table products;

-- Om man vill ta bort specifiik produkt
-- DELETE FROM products WHERE productId = 2;

INSERT INTO products(pubPro, productSerial, productName, productImage, productStock, productPrice, productCategory)
VALUES (1, 'US12345-1', 'Crash Twinsanity', '/src/assets/covers/1.png', 3000, 299, 'Platformer'),
       (1, 'US12345-2', 'Contra: Shattered Soldier', '/src/assets/covers/2.png', 5, 399, 'Arcade Shooter'),
       (1, 'US12345-3', 'Transformers', '/src/assets/covers/3.png', 100, 399, 'Shooter'),
       (1, 'US12345-4', 'Final Fantasy X', '/src/assets/covers/4.png', 300, 199, 'RPG'),
       (1, 'JPN12345-1', 'Berserk Millennium Falcon Arc: Seimasenki no Sho', '/src/assets/covers/5.png', 5, 699, 'Hack & Slash'),
       (1, 'US12345-5', 'I-Ninja', '/src/assets/covers/6.png', 400, 299, 'Puzzle, Platformer' ),
       (2, 'US12345-6', 'Phantom Dust', '/src/assets/covers/7.png', 10, 499,'Action, Cards' ),
       (2, 'US12345-7', 'Panzer Dragoon Orta', '/src/assets/covers/8.png', 30, 399, 'Arcade, Rail shooter'),
       (2, 'US12345-8', 'Otogi: Myth of Demons', '/src/assets/covers/9.png', 150, 299, 'Hack & Slash' ),
       (2, 'US12345-9', 'Halo 2', '/src/assets/covers/10.png', 500, 299, 'FPS, Shooter'),
       (2, 'US23456-1', 'Jade Empire', '/src/assets/covers/11.png', 200, 399, 'Action RPG'),
       (2, 'JPN12345-2', 'Jet Set Radio Future', '/src/assets/covers/12.png', 100, 399, 'Platformer, Extreme sports'),
       (3, 'US23456-2', 'Super Smash Bros: Melee', '/src/assets/covers/13.png', 500, 599, 'Fighting' ),
       (3, 'US23456-3', 'Metroid Prime', '/src/assets/covers/14.png', 300, 499, 'Metroidvania, Shooter'),
       (3, 'JPN12345-3', 'Tales of Symphonia', '/src/assets/covers/15.png', 200, 299, 'Action RPG'),
       (3, 'US23456-4', 'Eternal Darkness: Sanity''s Requiem', '/src/assets/covers/16.png', 400, 399, 'Puzzle, Survival, Horror'),
       (3, 'US23456-5', 'SoulCalibur II', '/src/assets/covers/17.png', 300, 399, 'Fighting'),
       (3, 'US23456-6', 'Ikaruga', '/src/assets/covers/18.png', 200, 299, 'Shoot em up'),
       (4, 'US23456-7', 'WarCraft III: Reign of Chaos', '/src/assets/covers/19.png', 1000000, 199, 'Real-time strategy'),
       (4, 'US23456-8', 'Age of Mythology', '/src/assets/covers/20.png', 1000000, 199, 'Real-time strategy'),
       (4, 'US23456-9', 'The Orange Box', '/src/assets/covers/21.png', 1000000, 199, 'FPS, Shooter, Platformer'),
       (4, 'US34567-1', 'BioShock', '/src/assets/covers/22.png', 1000000, 99, 'FPS'),
       (4, 'US34567-2', 'Day of the Tentacle', '/src/assets/covers/23.png', 1000000, 99, 'Point & Click, Adventure, Puzzle'),
       (4, 'US34567-3', 'System Shock 2', '/src/assets/covers/24.png', 1000000, 99, 'FPS, Stealth, RPG');

CREATE VIEW productView AS
SELECT publishers.pubName, products.productName, products.productStock FROM publishers
INNER JOIN products ON publishers.publisherId = products.pubPro;

SELECT * FROM productView;

SELECT * FROM products;


CREATE TABLE customers(
    customerId INT NOT NULL AUTO_INCREMENT,
    customerName VARCHAR(50),
    customerMail VARCHAR(50),
    customerAdress VARCHAR(50),
    customerPassword VARCHAR(50) NULL,
    PRIMARY KEY (customerId)
);

SELECT * FROM customers;

INSERT INTO customers (customerName, customerMail, customerAdress) VALUES ('Pedram', 'pedram@iths.se', 'biskopsgården');
INSERT INTO customers (customerName, customerMail, customerAdress) VALUES ('Mano', 'mano@iths.se', 'torslanda'), ('Emnet', 'emnet@iths.se', 'gbg');


-- tillåter NULL i foreign key kolumnen om en kundvagn inte har en aktiv kupong.

CREATE TABLE coupons (
    couponId INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) UNIQUE,
    discount INT,
    expirationDate DATE,
    isActive BOOLEAN
);

INSERT INTO coupons (code, discount, expirationDate, isActive) VALUES ('sommar20', 20, '2024-06-01', true);

SELECT * FROM coupons;

CREATE TABLE cart(
    cartId INT NOT NULL AUTO_INCREMENT,
    deliveryOption VARCHAR(50),
    shippingAdress VARCHAR(50),
    PRIMARY KEY (cartId)
);

INSERT INTO cart (deliveryOption, shippingAdress) VALUES ('DHL', 'DHL service point');
INSERT INTO cart (deliveryOption, shippingAdress) VALUES ('DHL', 'DHL service point');
INSERT INTO cart (deliveryOption, shippingAdress) VALUES ('DHL', 'DHL service point');


SELECT * FROM cart;

CREATE TABLE orders(
    orderId INT NOT NULL AUTO_INCREMENT,
    productOrder INT,
    orderNumber VARCHAR(50),
    orderQuantity INT,
    customerOrder INT,
    cartOrder INT,
    couponId INT NULL,
    PRIMARY KEY (orderId),
    FOREIGN KEY (productOrder) REFERENCES products(productId),
    FOREIGN KEY (customerOrder) REFERENCES customers(customerId),
    FOREIGN KEY (cartOrder) REFERENCES cart(cartId),
    FOREIGN KEY (couponId) REFERENCES coupons(couponId)
);


-- Dessa rader skapar första ordern
INSERT INTO orders (productOrder, orderNumber,  customerOrder, cartOrder,  orderQuantity) VALUES (1, 'order1', 1, 1, 2);
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (2, 'order1', 1, 1, 2);
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (2, 'order1', 1, 1, 2);
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity, couponId) VALUES (2, 'order1', 1, 1, 2, 1);

-- Här skapar vi andra ordern
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (2, 'order2', 2, 2, 3);

-- Här skapas tredje ordern
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (3, 'order4', 2, 2, 2);
-- one more
INSERT INTO orders (productOrder, orderNumber, customerOrder, cartOrder,  orderQuantity) VALUES (3, 'order4', 2, 2, 1);



SELECT * FROM orders;
SELECT * FROM products;


CREATE VIEW OrderView AS
SELECT products.productName, customers.customerName, cart.shippingAdress, orders.couponId, orders.orderNumber, products.productSerial, orders.orderQuantity FROM products
INNER JOIN orders ON products.productId = orders.productOrder
INNER JOIN customers ON orders.customerOrder = customers.customerId
INNER JOIN cart ON orders.cartOrder = cart.cartId;


SELECT * FROM OrderView;

SELECT COUNT(orderId) AS countCartItem
FROM orders
INNER JOIN cart ON orders.cartOrder = cart.cartId
WHERE orders.orderNumber = 'order1';

-- Trigger som håller koll på lagersaldo (productStock)
DELIMITER $$
CREATE TRIGGER stockUpdate
    AFTER INSERT ON orders
     FOR EACH ROW
        BEGIN
            IF EXISTS (SELECT * FROM products WHERE productStock > NEW.orderQuantity) THEN

-- uppdatera produktlager - så många som är köpta i en order.
-- productId = productOrder eftersom productId är FK i order tabellen
       UPDATE products SET productStock = productStock - NEW.orderQuantity WHERE productId = NEW.productOrder;
        ELSE
            -- Kasta ett fel om det inte finns tillräckligt lager
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Insufficient stock available';
END IF;

END $$

-- Trigger som hindrar order att genomföras om lagersaldo är 0
DELIMITER //
CREATE TRIGGER emptyStock
    BEFORE INSERT ON orders
    FOR EACH ROW
    BEGIN
        IF EXISTS (SELECT * FROM products WHERE productStock < NEW.orderQuantity) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Not in stock';
        END IF ;
    END //


-- För eventuell korrigering
DROP TRIGGER emptyStock;
DROP TRIGGER stockUpdate;
DROP DATABASE game_store;
